#pragma once

#include "Figure2D.h"
#include "Point.h"
#include <iostream>

/*
 * @brief Класс, представляющий прямоугольник в двумерном пространстве. 
 * Наследует от класса Figure2D и содержит три точки, представляющие вершины прямоугольника.
 */
class Rectangle : public Figure2D {
    Point a; ///< Первая вершина прямоугольника.
    Point b; ///< Вторая вершина прямоугольника.
    Point c; ///< Третья вершина прямоугольника.
    Point d; ///< Четвёртая вершина прямоугольника.

    /*
     * @brief Проверяет, что вершины a, b, c могут быть вершинами корректного прямоугольника. 
     * Если это не так, то выбрасывается исключение.
     * @param maxScreenResolution Максимальное разрешение экрана для проверки допустимых координат.
     */
    void validate(Point maxScreenResolution);

public:
    /*
     * @brief Конструктор для создания прямоугольника с заданными вершинами. 
     * @param maxScreenResolution Максимальное разрешение экрана для проверки допустимых координат.
     * @param a Первая вершина прямоугольника.
     * @param b Вторая вершина прямоугольника.
     * @param c Третья вершина прямоугольника.
     */
    Rectangle(const Point& maxScreenResolution, const Point& a,
          const Point& b, const Point& c);
    
    /*
     * @brief Конструктор прямоугольника по трем точкам
     * Создает прямоугольник, заданный тремя точками на плоскости, 
     * с учетом максимального разрешения экрана.
     * @param maxScreenResolution Максимальное разрешение экрана (правая нижняя граница).
     *        Все точки прямоугольника должны находиться в пределах (0,0) - maxScreenResolution.
     * @param a Первая угловая точка прямоугольника (обычно левый верхний угол)
     * @param b Вторая угловая точка прямоугольника (обычно правый верхний угол)
     * @param c Третья угловая точка прямоугольника (обычно левый нижний угол)
     * @throw std::invalid_argument Если:
     *        - Любая из точек выходит за границы maxScreenResolution
     *        - Точки не образуют прямоугольник (углы не 90 градусов)
     *        - Точки расположены на одной прямой
     * @note Для прямоугольника достаточно трех точек, так как четвертая может быть однозначно вычислена.
     *       Порядок точек имеет значение - они должны идти последовательно по периметру.
     */
Rectangle(const Point& maxScreenResolution,
          const Point& a,
          const Point& b,
          const Point& c);
     */
    Rectangle(const Point& maxScreenResolution,
          const Point& a,  // Точка A как объект Point
          const Point& b,  // Точка B как объект Point
          const Point& c); // Точка C как объект Point
    
    /*
     * @brief Возвращает строковое представление прямоугольника. 
     * Переопределяет метод ToString из базового класса Figure2D.
     * @return Строковое представление прямоугольника.
     */
    std::string ToString() const override;

    /*
     * @brief Перегрузка оператора ввода для прямоугольника. 
     * Считывает данные о вершинах прямоугольника из потока ввода.
     * @param is Поток ввода, из которого будут считаны данные о прямоугольнике.
     * @param rect Прямоугольник, в который будут записаны считанные значения.
     * @return Ссылку на поток ввода для поддержки цепочки операций.
     */
    friend std::istream& operator>>(std::istream& is, Rectangle& rect);
};

#include "Point.h"

using namespace std;

/*
 * @brief Конструктор для создания точки с заданными координатами. 
 * @param x Координата X точки.
 * @param y Координата Y точки.
 */
Point::Point(unsigned x, unsigned y) : x(x), y(y) {}

/*
 * @brief Оператор сравнения на равенство. 
 * Проверяет, равны ли текущая точка и другая точка.
 * @param other Другая точка для сравнения.
 * @return true, если точки равны; false в противном случае.
 */
bool operator==(const Point& other) const {
    return get_x() == other.get_x() && get_y() == other.get_y();
}

/*
 * @brief Оператор сравнения на неравенство. 
 * Проверяет, не равны ли текущая точка и другая точка.
 * @param other Другая точка для сравнения.
 * @return true, если точки не равны; false в противном случае.
 */
bool Point::operator!=(const Point& other) const {
    return !(*this == other);
}

/*
 * @brief Перегрузка оператора вывода для точки. 
 * Выводит координаты точки в поток вывода.
 * @param os Поток вывода, в который будет записано представление точки.
 * @param p Точка, которую нужно вывести.
 * @return Ссылку на поток вывода для поддержки цепочки операций.
 */
std::ostream& operator<<(std::ostream& os, const Point& p) {
    os << '(' << p.x << "; " << p.y << ')';
    return os;
}

/*
 * @brief Перегрузка оператора ввода для точки. 
 * Считывает координаты точки из потока ввода.
 * @param is Поток ввода, из которого будут считаны координаты.
 * @param p Точка, в которую будут записаны считанные значения.
 * @return Ссылку на поток ввода для поддержки цепочки операций.
 */
std::istream& operator>>(std::istream& is, Point& p) {
    is >> p.x >> p.y;
    return is;
}

/*
 * @brief Оператор сложения для двух точек. 
 * Возвращает новую точку, координаты которой являются суммой
 * соответствующих координат текущей точки и переданной точки.
 * @param vec Точка, которую нужно сложить с текущей.
 * @return Новая точка, представляющая сумму двух точек.
 */
Point Point::operator+(const Point& vec) {
    Point res(x + vec.x, y + vec.y);
    return res;
}

/*
 * @brief Преобразует точку в строковое представление. 
 * Возвращает строку, содержащую координаты точки в формате "(x; y)".
 * @return Строковое представление точки.
 */
std::string Point::ToString() const {
    return string("(") + to_string(x) + "; " + to_string(y) + ")";
}
